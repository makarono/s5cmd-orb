version: 2.1
orbs:
  orb-tools: circleci/orb-tools@12.0
  s5cmd-orb: {}
filters: &filters
  tags:
    only: /.*/
release-filters: &release-filters
  branches:
    ignore: /.*/
  tags:
    only: /^v[0-9]+\.[0-9]+\.[0-9]+$/

jobs:
  integration-test-install:
    parameters:
      executor:
        type: executor
      version:
        description: Select a specific version of the s5cmd. By default the 2.2.2 version will be used.
        default: 2.2.2
        type: string
      override_installed:
        type: boolean
        default: false
      binary_dir:
        type: string
        default: "/usr/local/bin"
        description: |
          Specify the binary directory
      install_dir:
        type: string
        default: "/usr/local/s5cmd"
        description: |
          Specify the installation directory
      set_aws_env_vars:
        type: boolean
        default: true
    executor: <<parameters.executor>>
    steps:
      - s5cmd-orb/install:
          version: <<parameters.version>>
          override_installed: <<parameters.override_installed>>
          binary_dir: <<parameters.binary_dir>>
          install_dir: <<parameters.install_dir>>
          set_aws_env_vars: <<parameters.set_aws_env_vars>>

workflows:
  test-deploy:
    jobs:
      - integration-test-install:
          name: integration-test-install
          executor: docker-base

      - orb-tools/pack:
          filters: *release-filters
      - orb-tools/publish:
          orb_name: circleci/aws-cli
          vcs_type: << pipeline.project.type >>
          pub_type: production
          enable_pr_comment: true
          context: orb-publisher
          requires: [orb-tools/pack, integration-test-install]
          filters: *release-filters

executors:
  terraform:
    docker:
      - image: hashicorp/terraform:1.4.1
  alpine:
    docker:
      - image: alpine:latest
  docker-base:
    docker:
      - image: cimg/base:stable
  docker-base-withenv:
    docker:
      - image: cimg/base:stable
        environment:
          AWS_ACCESS_KEY_ID: "key"
          AWS_SECRET_ACCESS_KEY: "secret"
  docker-nounset-shell:
    shell: /bin/bash -o nounset
    docker:
      - image: cimg/base:stable
  macos:
    macos:
      xcode: 14.2.0
  arm:
    machine:
      image: ubuntu-2004:current
    resource_class: arm.medium
  linuxvm:
    machine:
      image: ubuntu-2004:current
  windows:
    machine:
      image: windows-server-2019-vs2019:current
    shell: bash.exe
    resource_class: windows.medium

commands:
  check_aws_version:
    parameters:
      version:
        type: string
        default: ""
    steps:
      - run:
          name: check_aws_version
          command: |
            aws --version
            if [ -n "<<parameters.version>>" ]; then
              INSTALLED_AWS_VERSION="$(aws --version)"
              aws --version | grep <<parameters.version>>
            else
              if ! command -v aws &> /dev/null; then exit 1; else exit 0; fi
            fi
